;; -*- mode: Emacs-Lisp;-*-

(require 'package)
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("marmalade" . "http://marmalade-repo.org/packages/")
        ("melpa" . "http://melpa.milkbox.net/packages/")))
(package-initialize)

(require 'use-package)

;; Install packages
(defvar local-packages '(auto-complete
                         auto-dim-other-buffers
                         column-marker
                         cython-mode
                         diminish
                         exec-path-from-shell
                         flycheck
                         google-c-style
                         jedi
                         pbcopy
                         projectile
                         py-autopep8
                         rainbow-delimiters
                         redo+
                         use-package
                         zenburn-theme
                         zoom-frm))

(defun uninstalled-packages (packages)
  (delq nil
	(mapcar (lambda (p) (if (package-installed-p p) nil p)) packages)))
(let ((need-to-install (uninstalled-packages local-packages)))
  (when need-to-install
    (progn
      (package-refresh-contents)
      (dolist (p need-to-install)
        (package-install p)))))

;; Save the open windows
(desktop-save-mode 1)
;; Don't give a scratch buffer message
(setq initial-scratch-message "")
;; No menu-bar
(menu-bar-mode -1)
;; Always show column numbers
(column-number-mode t)
;; Zenburn
(load-theme 'zenburn t)
;; Make garbage collector happen ever 20MB allocated
(setq gc-cons-threshold 20000000)
;; Deletes selected text
(delete-selection-mode t)
;; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)
;; Autowraps after 79 characters
(setq-default auto-fill-function 'do-auto-fill)
(setq-default fill-column 79)
;; Clear all whitespace
(add-hook 'before-save-hook 'delete-trailing-whitespace)
;; Replaces white space with just one space
(global-set-key (kbd "C-c C-SPC") 'just-one-space)
;; Line numbers
(global-set-key (kbd "C-x C-n") 'global-linum-mode)
;; Org mode for todo and org files
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.todo\\'" . org-mode))
;; Don't ding
(setq ring-bell-function 'ignore)
(global-set-key (kbd "RET") 'newline-and-indent)
;; Don't capitalize
(global-unset-key "\M-u")
(put 'upcase-region 'disabled nil)
;; Autosave files go to a temp folder
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(set-cursor-color "salmon1")
;; Disable line wrapping in minibuffer
(add-hook 'minibuffer-setup-hook
          (lambda () (setq truncate-lines nil)))

(defun describe-last-function()
  (interactive)
  (describe-function last-command))
;; Nobody likes to have to type "yes" to questions, so change it to just
;; hitting the y key to confirm
(defalias 'yes-or-no-p 'y-or-n-p)

;; Transpose buffers
(defun transpose-buffers (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
            (next-win (window-buffer (funcall selector))))
        (set-window-buffer (selected-window) next-win)
        (set-window-buffer (funcall selector) this-win)
        (select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))
(global-set-key (kbd "C-x 4 t") 'transpose-buffers)

;; Calm down minor modes
(use-package diminish :ensure t)

(use-package paren
  :ensure t
  :config (progn (show-paren-mode 1)
                 (setq show-paren-delay 0)
                 (set-face-background 'show-paren-match (face-background 'default))
                 (set-face-foreground 'show-paren-match "#def")
                 (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
                 (set-face-attribute 'show-paren-match nil :underline t)
                 (set-face-background 'show-paren-mismatch (face-background 'default))
                 (set-face-foreground 'show-paren-mismatch "red")
                 (set-face-attribute 'show-paren-mismatch nil :underline t)))

(use-package magit
  :ensure t
  :init (progn (global-auto-revert-mode 1)
               (setq auto-revert-verbose nil))
  :config (defvar magit-emacsclient-executable nil)
  :bind (("M-g M-s" . magit-status)
         ("M-g M-c" . magit-commit)
         ("M-g M-d" . magit-diff-unstaged)))

;; https://github.com/jonathanchu/emacs-powerline
(add-to-list 'load-path "~/.emacs.d/vendor/emacs-powerline")
(use-package powerline
  :config
  (progn
    (defvar powerline-color0)
    (setq powerline-color0 "grey60")

    (defpowerline display-time display-time-string)
    (setq display-time-format "%I:%M%p | %a %D |")
    (setq display-time-default-load-average nil)
    (display-time-mode t)

    (zenburn-with-color-variables
      (set-face-attribute 'mode-line nil
                          :foreground "#030303"
                          :background zenburn-green+4
                          :box nil)
      (set-face-attribute 'mode-line-inactive nil
                          :foreground "#f9f9f9"
                          :background powerline-color0
                          :box nil))
    ;; Special characters:
    ;; http://www.gnu.org/software/emacs/manual/html_node/elisp/_0025_002dConstructs.html
    (setq-default mode-line-format
                  (list "%e"
                        '(:eval (append
                                 (list
                                  (powerline-make-text "| %2I | %* | %b " nil)
                                  (powerline-arrow 'left nil powerline-color1)
                                  (powerline-make-text " %c | %l (%p)" powerline-color1)
                                  (powerline-narrow 'left powerline-color1 powerline-color2)
                                  (powerline-major-mode 'left powerline-color2)
                                  (powerline-make-text " | " powerline-color2)
                                  (powerline-minor-modes 'center powerline-color2))
                                 (powerline-pull-right
                                  (list
                                   (powerline-vc 'right powerline-color1 powerline-color2)
                                   (powerline-display-time 'right powerline-color0 powerline-color1)
                                   (powerline-make-text "%-" powerline-color0)))))))))
(use-package helm-ls-git :ensure t)
(use-package helm-projectile
  :ensure t
  :diminish proj)
(use-package helm
  :ensure
  :diminish helm
  :bind (("C-c h" . helm-command-prefix)
         ("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-x C-d" . helm-browse-project)
         ("C-x b" . helm-mini)
         ("C-x C-b" . helm-buffers-list)
         ("M-y" . helm-show-kill-ring)
         ("C-y" . yank))
  :init (progn (require 'helm-config)
               (bind-keys :map helm-map
                          ("<tab>" . helm-execute-persistent-action)
                          ("C-i" . helm-execute-persistent-action)
                          ("C-z" . helm-select-action))
               (unbind-key (kbd "C-x c"))
               (setq helm-mode-fuzzy-match 1)
               (setq helm-completion-in-region-fuzzy-match 1)
               (setq helm-M-x-fuzzy-match t)
               (setq helm-buffers-fuzzy-matching t)
               (setq helm-recentf-fuzzy-match t)
               (projectile-global-mode)
               (helm-projectile-on)
               (setq projectile-completion-system 'helm)
               (setq projectile-switch-project-action 'helm-projectile-find-file)
               (helm-mode 1)))

;; Undo is C-/, Redo is C-?
(use-package redo+
  :ensure t
  :bind (("C-?" . redo)))

(use-package rainbow-delimiters
  :ensure t
  :config (progn (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)))

;; Simple autocomplete
(use-package auto-complete
  :ensure t
  :diminish auto-complete-mode
  :config (progn (require 'auto-complete-config)
                 (ac-config-default)
                 (setq ac-show-menu-immediately-on-auto-complete t)
                 (setq ac-delay 0.1)
                 (bind-keys :map ac-menu-map
                            ("C-g" . ac-stop)
                            ("C-n" . ac-next)
                            ("C-p" . ac-previous))))

(use-package git-gutter+
  :ensure t
  :diminish git-gutter+-mode
  :bind (("M-g M-p" . git-gutter+-previous-hunk)
         ("M-g M-n" . git-gutter+-next-hunk))
  :config (progn (global-git-gutter+-mode t)
                 (add-hook 'git-gutter+:update-hooks 'magit-revert-buffer-hook)))

;; Python auto-complete
(require 'python)
(require 'jedi)
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)
(setq jedi:tooltip-method '(pos-tip))
(defun my/jedi-mode-hook ()
  (set (make-local-variable 'ac-max-width) 0.5)
  (local-set-key (kbd "M-.") 'jedi:goto-definition)
  (local-set-key (kbd "M-,") 'jedi:goto-definition-pop-marker)
  (local-set-key (kbd "M-/") 'jedi:show-doc)
  (local-set-key (kbd "M-?") 'jedi:get-in-function-call)
  ;; Make C-c C-c behave like C-u C-c C-c in Python mode
  (local-set-key (kbd "C-c C-c")
                 (lambda () (interactive) (python-shell-send-buffer t)))
  (define-key python-mode-map (kbd "<backtab>") 'python-indent-dedent-line-backspace))

(add-hook 'jedi-mode-hook 'my/jedi-mode-hook)
;; Tab width = 2
(add-hook 'python-mode-hook
          (function (lambda () (setq indent-tabs-mode nil tab-width 2))))

;; Tab width = 2
(setq indent-tabs-mode nil)
(add-hook 'python-mode-hook
          (lambda ()
            (setq py-indent-offset 2)
            (setq python-indent-offset 2)
            (setq tab-width 2)))

(when (executable-find "ipython")
  (setq python-shell-interpreter "ipython"))

(defun flycheck-python-setup ()
  (flycheck-mode))
(add-hook 'python-mode-hook #'flycheck-python-setup)

(require 'column-marker)
(add-hook 'python-mode-hook (lambda () (interactive) (column-marker-1 80)))

(use-package auto-dim-other-buffers
  :ensure t
  :diminish auto-dim-other-buffers-mode
  :config (progn
            (auto-dim-other-buffers-mode t)
            (set-face-attribute 'auto-dim-other-buffers-face nil :background "gray15")))

(use-package emmet-mode
  :diminish em
  :ensure t)

(use-package web-mode
  :ensure t
  :diminish web
  :mode (("\\.phtml\\'" . web-mode)
         ("\\.erb\\'" . web-mode)
         ("\\.jsp\\'" . web-mode)
         ("\\.as[cp]x\\'" . web-mode)
         ("\\.erb\\'" . web-mode)
         ("\\.html\\'" . web-mode)
         ("\\.rhtml\\'" . web-mode)
         ("\\.mustache\\'" . web-mode))
  :init (progn
          (add-hook 'after-init-hook 'emmet-mode))
  :config (progn
            (setq web-mode-markup-indent-offset 2)
            (setq web-mode-css-indent-offset 2)
            (setq web-mode-code-indent-offset 2)
            (setq web-mode-enable-current-column-highlight t)
            (setq web-mode-engines-alist '(("django" . "\\.html\\'")))
            (bind-keys :map ac-menu-map
                       ("C-;" . web-mode-comment-or-uncomment))
            (unbind-key "C-c C-s" web-mode-map)
            (unbind-key "C-c C-n" web-mode-map)))

;; Setup multiple cursors
(use-package multiple-cursors
  :ensure t
  :diminish mc
  :bind (("C-c C-s" . mc/mark-next-like-this)
         ("C-c C-S-S" . mc/mark-all-like-this)
         ("C-c C-n" . mc/mark-next-symbol-like-this)
         ("C-c C-p" . mc/ummark-next-like-this)))

;; "undo" (and "redo") changes in the window configuration with the key
;; commands "C-c left" and "C-c right"
(use-package winner
  :ensure t
  :bind (("M-j" . next-multiframe-window)
         ("M-k" . previous-multiframe-window)))

(use-package eldoc
  :diminish ""
  :config (progn (add-hook 'emacs-lisp-mode-hook (lambda () (interactive) (eldoc-mode 1)))
                 (setq eldoc-idle-delay 0.3)
                 (zenburn-with-color-variables
                   (set-face-attribute 'eldoc-highlight-function-argument nil
                                       :underline t :foreground zenburn-red
                                       :weight 'bold))))

(use-package markdown-mode
  :ensure t
  :mode (("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . web-mode))
  :init (progn (setq markdown-command "pandoc --smart -f markdown -t html")))

(use-package visual-regexp-steroids
  :ensure t
  :bind (("C-c r" . vr/replace)
         ("C-c q" . vr/query-replace)
         ("C-c m" . vr/mc-mark)
         ("C-M-r" . vr/isearch-backward)
         ("C-M-s" . vr/isearch-forward)))

(use-package google-c-style
  :ensure t
  :init (progn (add-hook 'c-mode-common-hook 'google-set-c-style) ))

(use-package py-autopep8
  :ensure t
  :init (progn (setq py-autopep8-options '("--indent-size=2"))))
