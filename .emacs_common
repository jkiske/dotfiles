;; -*- mode: Emacs-Lisp;-*-

(require 'package)
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("marmalade" . "http://marmalade-repo.org/packages/")
        ("melpa" . "http://melpa.milkbox.net/packages/")))
(package-initialize)

;; Install packages
(defvar local-packages '(auto-complete
                         auto-dim-other-buffers
                         column-marker
                         cython-mode
                         diminish
                         exec-path-from-shell
                         google-c-style
                         flx-ido
                         git-gutter+
                         indent-guide
                         magit
                         markdown-mode
                         multi-web-mode
                         multiple-cursors
                         paren
                         pbcopy
                         popup
                         popup-kill-ring
                         pos-tip
                         powerline
                         rainbow-delimiters
                         redo+
                         smex
                         use-package
                         visual-regexp-steroids
                         zenburn-theme
                         zoom-frm))

(defun uninstalled-packages (packages)
  (delq nil
	(mapcar (lambda (p) (if (package-installed-p p) nil p)) packages)))
(let ((need-to-install (uninstalled-packages local-packages)))
  (when need-to-install
    (progn
      (package-refresh-contents)
      (dolist (p need-to-install)
        (package-install p)))))

;; Save the open windows
(desktop-save-mode 1)
;; Don't give a scratch buffer message
(setq initial-scratch-message "")
;; No menu-bar
(menu-bar-mode -1)
;; Always show column numbers
(column-number-mode t)
;; Line numbers
(global-set-key (kbd "C-x C-n") 'global-linum-mode)
;; Zenburn
(load-theme 'zenburn t)
;; Make garbage collector happen ever 20MB allocated
(setq gc-cons-threshold 20000000)
;; Deletes selected text
(delete-selection-mode t)
;; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)
;; Autowraps after 79 characters
(setq-default auto-fill-function 'do-auto-fill)
(setq-default fill-column 79)
;; Clear all whitespace
(add-hook 'before-save-hook 'delete-trailing-whitespace)
;; Replaces white space with just one space
(global-set-key (kbd "C-c C-SPC") 'just-one-space)
;; Don't ding
(setq ring-bell-function 'ignore)

(global-set-key (kbd "RET") 'newline-and-indent)
;; Don't capitalize
(global-unset-key "\M-u")
;; Autosave files go to a temp folder
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(set-cursor-color "salmon1")
;; Disable line wrapping in minibuffer
(add-hook 'minibuffer-setup-hook
          (lambda () (setq truncate-lines nil)))

(require 'paren)
(show-paren-mode 1)
(setq show-paren-delay 0)
(set-face-background 'show-paren-match (face-background 'default))
(set-face-foreground 'show-paren-match "#def")
(set-face-attribute 'show-paren-match nil :weight 'extra-bold)
(set-face-attribute 'show-paren-match nil :underline t)
(set-face-background 'show-paren-mismatch (face-background 'default))
(set-face-foreground 'show-paren-mismatch "red")
(set-face-attribute 'show-paren-mismatch nil :underline t)

(require 'magit)
(global-set-key (kbd "M-g M-s") 'magit-status)
(global-set-key (kbd "M-g M-c") 'magit-commit)
(global-set-key (kbd "M-g M-d") 'magit-diff-unstaged)
;; Have emacs autoreload on git resets
(global-auto-revert-mode 1)
(setq auto-revert-verbose nil)

;; https://github.com/jonathanchu/emacs-powerline
(add-to-list 'load-path "~/.emacs.d/vendor/emacs-powerline")
(require 'powerline)
(defvar powerline-color0)
(setq powerline-color0 "grey60")

(defpowerline display-time display-time-string)
(setq display-time-format "%I:%M%p | %a %D |")
(setq display-time-default-load-average nil)
(display-time-mode t)

(zenburn-with-color-variables
  (set-face-attribute 'mode-line nil
                      :foreground "#030303"
                      :background zenburn-green+4
                      :box nil)
  (set-face-attribute 'mode-line-inactive nil
                      :foreground "#f9f9f9"
                      :background powerline-color0
                      :box nil))


;; Special characters:
;; http://www.gnu.org/software/emacs/manual/html_node/elisp/_0025_002dConstructs.html
(setq-default mode-line-format
  (list "%e"
    '(:eval (append
       (list
        (powerline-make-text "| %2I | %* | %b " nil)
        (powerline-arrow 'left nil powerline-color1)
        (powerline-make-text " %c | %l (%p)" powerline-color1)
        (powerline-narrow 'left powerline-color1 powerline-color2)
        (powerline-major-mode 'left powerline-color2)
        (powerline-make-text " | " powerline-color2)
        (powerline-minor-modes 'center powerline-color2))
     (powerline-pull-right
      (list
        (powerline-vc 'right powerline-color1  powerline-color2)
        (powerline-display-time 'right powerline-color0  powerline-color1)
        (powerline-make-text "%-" powerline-color0)))))))

(require 'smex)
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

;; Shows entire kill ring history
(require 'popup)
(require 'pos-tip)
(require 'popup-kill-ring)
(global-set-key (kbd "C-y") 'yank)
(global-set-key (kbd "M-y") 'popup-kill-ring)

;; Undo is C-/, Redo is C-?
(require 'redo+)
(global-set-key (kbd "C-?") 'redo)

(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

(put 'upcase-region 'disabled nil)

;; Fuzzy search for file names
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)

;; Simple autocomplete
(require 'auto-complete-config)
(ac-config-default)
(setq ac-show-menu-immediately-on-auto-complete  t)
(define-key ac-completing-map (kbd "C-g") 'ac-stop)
(setq ac-delay 0.2)

;; Setup multiple cursors
(require 'multiple-cursors)
(global-set-key (kbd "C-c s") 'mc/mark-next-like-this)
(global-set-key (kbd "C-c S") 'mc/mark-all-like-this)
(global-set-key (kbd "C-c n") 'mc/mark-next-symbol-like-this)

;; Adds git changes to the gutter on emacs
(defun describe-last-function()
  (interactive)
  (describe-function last-command))

(require 'git-gutter+)
(global-git-gutter+-mode t)
(global-set-key (kbd "M-g M-p") 'git-gutter+-previous-hunk)
(global-set-key (kbd "M-g M-n") 'git-gutter+-next-hunk)

;; Python auto-complete
(require 'python)
(require 'jedi)
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)
(setq jedi:tooltip-method '(pos-tip))
(defun my/jedi-mode-hook ()
  (set (make-local-variable 'ac-max-width) 0.5)
  (local-set-key (kbd "M-.") 'jedi:goto-definition)
  (local-set-key (kbd "M-,") 'jedi:goto-definition-pop-marker)
  (local-set-key (kbd "M-/") 'jedi:show-doc)
  (local-set-key (kbd "M-?") 'jedi:get-in-function-call)
  ;; Make C-c C-c behave like C-u C-c C-c in Python mode
  (local-set-key (kbd "C-c C-c")
                 (lambda () (interactive) (python-shell-send-buffer t)))
  (define-key python-mode-map (kbd "<backtab>") 'python-indent-dedent-line-backspace))

(add-hook 'jedi-mode-hook 'my/jedi-mode-hook)

(require 'auto-dim-other-buffers)
(auto-dim-other-buffers-mode t)
(set-face-attribute 'auto-dim-other-buffers-face nil :background "gray15")

(require 'multi-web-mode)
(setq mweb-default-major-mode 'html-mode)
(setq mweb-tags '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
                  (js-mode "<script +\\(type=\"text/javascript\"\\|language=\"javascript\"\\)[^>]*>" "</script>")
                  (css-mode "<style +type=\"text/css\"[^>]*>" "</style>")))
(setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
(multi-web-global-mode 1)

;; MacPorts specific
(setq ispell-program-name "/opt/local/bin/ispell")

;; "undo" (and "redo") changes in the window configuration with the key
;; commands "C-c left" and "C-c right"
(winner-mode 1)
(global-set-key (kbd "M-k") 'next-multiframe-window)
(global-set-key (kbd "M-j") 'previous-multiframe-window)

(defun flycheck-python-setup ()
  (flycheck-mode))
(add-hook 'python-mode-hook #'flycheck-python-setup)

(require 'column-marker)
(add-hook 'python-mode-hook (lambda () (interactive) (column-marker-1 80)))

;; Nobody likes to have to type "yes" to questions, so change it to just
;; hitting the y key to confirm
(defalias 'yes-or-no-p 'y-or-n-p)

;; Transpose buffers
(defun transpose-buffers (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
            (next-win (window-buffer (funcall selector))))
        (set-window-buffer (selected-window) next-win)
        (set-window-buffer (funcall selector) this-win)
        (select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))
(global-set-key (kbd "C-x 4 t") 'transpose-buffers)

(add-hook 'emacs-lisp-mode-hook (lambda () (interactive) (eldoc-mode 1)))
(require 'use-package)
(use-package eldoc
             :config
             (progn
               (use-package diminish
                            :init
                            (progn (diminish 'eldoc-mode "")))
               (setq eldoc-idle-delay 0.3)
               (zenburn-with-color-variables
                 (set-face-attribute 'eldoc-highlight-function-argument nil
                                     :underline t :foreground zenburn-red
                                     :weight 'bold))))

;; Calm down minor modes
(require 'diminish)
(eval-after-load "indent-guide"
  '(diminish 'indent-guide-mode))
(eval-after-load "auto-complete"
  '(diminish 'auto-complete-mode "ac"))
(eval-after-load "git-gutter+"
  '(diminish 'git-gutter+-mode "gg"))
(eval-after-load "auto-dim-other-buffers"
  '(diminish 'auto-dim-other-buffers-mode))
(diminish 'auto-fill-function "fill")

(require 'markdown-mode)
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(setq markdown-command "pandoc --smart -f markdown -t html")

(require 'visual-regexp-steroids)
(define-key global-map (kbd "C-c r") 'vr/replace)
(define-key global-map (kbd "C-c q") 'vr/query-replace)
;; if you use multiple-cursors, this is for you:
(define-key global-map (kbd "C-c m") 'vr/mc-mark)
;; to use visual-regexp-steroids's isearch instead of the built-in regexp
;; isearch, also include the following lines:
(define-key global-map (kbd "C-M-r") 'vr/isearch-backward) ;; C-M-r
(define-key global-map (kbd "C-M-s") 'vr/isearch-forward) ;; C-M-s

(require 'google-c-style)
(add-hook 'c-mode-common-hook 'google-set-c-style)
